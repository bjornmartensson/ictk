{"name":"ictk","tagline":"Internet Chess ToolKit - a chess library useful for performing common tasks such as reading PGN, FEN, and generating legal moves. The net libraries convert ICS (Internet Chess Server) output into java objects.","body":"# -=[ ictk ]=- Internet Chess Toolkit \r\n\r\nInternet Chess ToolKit is a java based set of libraries and widgets useful \r\nfor performing common tasks such as reading PGN, FEN, and generating \r\nlegal moves. The net libraries convert ICS (Internet Chess Server) output \r\ninto java POJOs for easy use by a client.\r\n\r\n## SPECIFICATIONS & DESIGN\r\n\r\n   If you're looking for a super fast Java implementation of a chess model \r\nto use as a basis for a chess engine you need to look elsewhere.  The \r\ndesign goal of this library has never been speed.  If it were it would \r\ncreate a LOT fewer objects.  Instead, the goal of ictk is to render chess\r\nin a natural object oriented way that is both easy to use and well documented.  \r\n\r\n   This library started out in 1997 as a proof of Object Oriented Design \r\nconcepts.  The chess pieces act as agents and generate their own moves after\r\nanalysis of the board state.  A move object is an implementation of a \r\nCommand Pattern.  And so on.  \r\n\r\n   The Internet Chess Server (ICS/FICS) support converts the server's telent\r\ntext into POJOs, implementing a MVC based EventListener model for client code\r\nto easily process.  As Java is overly verbose, and the messages are relatively\r\nsimplistic, the parsing is done in XML and converted to Java POJOs via XSTL.\r\nThe approach may seem overly complex to you, but saves a lot of time.\r\n\r\n   Finally, this is not a graphics library, it is a game modeling library.\r\nIt provides for reading and writing standard game notations as well.\r\n   \r\n## FEATURES\r\n* Object oriented Chess game model (MVC based)\r\n* Legal move generation\r\n* Game history with variation support (alternative move suggestions)\r\n* Move comment support in text and Numeric Annotation Glyphs (NAG)\r\n* Standard Algebraic Notation (SAN) read/write support (internationalized\r\n  for presentation in 16 languages)\r\n* Portable Game Notation (PGN) read/write support (including move variations,\r\n  and FEN)\r\n* Forsyth-Edwards Notation (FEN) read/write support\r\n* True MVC structure with board displays driven by game model events\r\n* Command-line Board display\r\n* Well documented. Sample code also provided.\r\n* FICS support [(freechess.org)](http://www.freechess.org)\r\n\r\n## REQUIREMENTS\r\n\r\n* [JDK 1.7](http://java.oracle.com) or better - Code now uses typed data\r\n  structures and leverages the <> operator which is a new 1.7 feature.  If\r\n  you would like to use JDK 1.4 - 1.6  the ictk v0.2 tag should work.\r\n  Otherwise get the jar from [sf.net](http://ictk.sourceforge.net).\r\n\r\n* [Ant 1.5](http://ant.apache.org) or better - Only required to generate the       source through XSLT and compile the code, of course.\r\n\r\n* [JUnit 3.8.0](http://junit.org) or better - Only necessary if you wish \r\n   to run the regression testing suite.\r\n\r\n## LICENSE\r\n\r\n   ictk is distributed under the GNU Public License version 2.  A copy of\r\nthis license is available in the file named COPYING, which should have\r\nbeen included with this distribution.\r\n\r\n   If you wish to use this library for propriety purposes you must contact\r\nthe author.\r\n\r\n## INSTALLATION\r\n\r\n### From Source\r\nThe following commands will retrieve the latest source, generate the source code through XSLT, compile, create the Java-Doc and make the full jar file.  Just add the jar file to your `CLASSPATH`.\r\n\r\n    $ git clone https://github.com/jvarsoke/ictk\r\n    $ cd ictk\r\n    $ ant build\r\n\r\n### From Binary (Jar)\r\nDownload the release file jar and add it to your classpath.\r\n\r\n##DEBUGGING\r\n\r\nBy default the library come with debugging info compiled in. (Unfortunately,\r\nthe library pre-dates [Log4j] and similar, so uses its own homegrown version).\r\nFrom the command line you can turn the debugging info on by using the \r\n`java -D options` to set a system property.  For example:\r\n\r\n    $ java -DDebug.History=1 Foo.java\r\n\r\nIf you really need a little more speed and you don't ever want to \r\nsee debugging info (if you really think ictk is that stable) you can\r\nchange the `itck.util.Log.debug` variable to false.  This will make \r\ndebugging impossible and eliminate all the conditional checks for\r\ndebugging.  Then you need to compile the optimized source (getting rid\r\nof java internal debugging info).  To do this:\r\n\r\n    $ ant clean\r\n    $ ant optimize\r\n\r\nOr if you wish to create an optimized jar file:\r\n\r\n    $ ant optimized-jar\r\n\r\n##TESTING\r\n   If you wish to run the test suite, perhaps to see if it's your code that's\r\nchoking on a PGN file or ictk code, you can do so through ant and JUnit:\r\n\r\n    $ ant test\r\n\r\n##FEEDBACK\r\n   If you find this library useful, drop me an email just to let me know what\r\nyou're doing with it.  Even if you're just messing around.  Knowing someone is\r\nusing this encourages me to dedicate time toward improving ictk -- otherwise\r\nI have lots of other things to donate my time to.  Thanks.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}