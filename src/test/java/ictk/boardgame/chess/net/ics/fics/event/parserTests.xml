<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--
 * ictk - Internet Chess ToolKit
 * More information is available at http://jvarsoke.github.io/ictk
 * Copyright (c) 1997-2014 J. Varsoke <ictk.jvarsoke [at] neverbox.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
-->
<!DOCTYPE ictkml SYSTEM "unitTest.dtd" [
   ]>

<unitTest>
   <!-- kibitz ............................................................-->
   <unit id="kibitz"
         class="Kibitz"
	 event="Kibitz"
	 >
      <test name="Message0"
            iochunk="0"
	    >
         <code format="java">
         assertTrue(evt.getPlayer().equals("Handle"));
         assertFalse(evt.getAccountType().is(ICSAccountType.UNREGISTERED));
         assertTrue(evt.getRating().get() == 1902);
         assertTrue(evt.getBoardNumber() == 7);
         assertTrue(evt.getMessage().equals("hey"));
	 </code>
      </test>
   </unit>

   <!-- channel ...........................................................-->
   <unit id="channel"
         class="Channel"
	 event="Channel"
	 >

      <test name="Message0"
            iochunk="0"
	    >
         <code format="java">
         assertTrue("Gorgonian".equals(evt.getPlayer()));
         assertTrue(evt.getChannel() == 50);
         assertTrue("da".equals(evt.getMessage()));
	 </code>
      </test>

      <test name="Message1"
            iochunk="1"
	    >
         <code format="java">
         assertTrue(evt.getAccountType().is(ICSAccountType.CHESS_ADVISOR));
	 </code>
      </test>

      <test name="Message3"
            iochunk="3"
	    >
         <code format="java">
         assertTrue(evt.getAccountType().is(ICSAccountType.ADMIN));
         assertTrue(evt.getAccountType().is(ICSAccountType.SERVICE_REP));
         assertTrue(evt.getAccountType().is(ICSAccountType.CHESS_ADVISOR));
         assertTrue(evt.getAccountType().is(ICSAccountType.TOURNAMENT_MANAGER));
         assertTrue(evt.getChannel() == 49);
	 </code>
      </test>
   </unit>

   <!-- shout .............................................................-->
   <unit id="shout"
         class="Shout"
	 event="Channel"
	 >
   </unit>

   <!-- tell ..............................................................-->
   <unit id="tell"
         class="Tell"
	 event="Tell"
	 >
      <test name="Message0"
            iochunk="0"
	    >
         <code format="java">
         assertTrue(evt.getPlayer().equals("Handle"));
         assertTrue(evt.getMessage().equals("Hey"));
         assertFalse(evt.isFake());
         assertTrue(evt.getEventType() == ICSEvent.TELL_EVENT);

         assertFalse(evt.getMessage().equals("hey"));
	 </code>
      </test>

      <test name="Message1"
            iochunk="1"
	    >
         <code format="java">
         assertTrue(evt.getPlayer().equals("Handle"));
         assertTrue(evt.getAccountType().is(ICSAccountType.COMPUTER));
         assertTrue(evt.getMessage().equals("Hey"));
         assertFalse(evt.isFake());
         assertTrue(evt.getEventType() == ICSEvent.TELL_EVENT);

         assertFalse(evt.getMessage().equals("hey"));
	 </code>
      </test>
   </unit>

   <!-- player connection..................................................-->
   <unit id="pin"
         class="PlayerConnection"
	 event="PlayerConnection"
	 >
   </unit>

   <!-- player notification................................................-->
   <unit id="pnot"
         class="PlayerNotification"
	 event="PlayerConnection"
	 >
   </unit>

   <!-- game created ......................................................-->
   <unit id="gin"
         class="GameCreated"
	 event="GameCreated"
	 >
   </unit>

   <!-- game notification..................................................-->
   <unit id="gnot"
         class="GameNotification"
	 event="GameNotification"
	 >
   </unit>

   <!-- game result .......................................................-->
   <unit id="game_result"
         class="GameResult"
	 event="GameResult"
	 >
   </unit>

   <!-- seek ad ...........................................................-->
   <unit id="seekad"
         class="SeekAd"
	 event="SeekAd"
	 >
   </unit>

   <!-- seek ad readable ..................................................-->
   <unit id="seekadreadable"
         class="SeekAdReadable"
	 event="SeekAd"
	 >
   </unit>

   <!-- seek clear ........................................................-->
   <unit id="seek_clear"
         class="SeekClear"
	 event="SeekClear"
	 >
   </unit>

   <!-- seek remove .......................................................-->
   <unit id="seek_remove"
         class="SeekRemove"
	 event="SeekRemove"
	 >
   </unit>

   <!-- board update style 12 .............................................-->
   <unit id="style12"
         class="BoardUpdateStyle12"
	 event="BoardUpdate"
	 >
   </unit>

   <!-- move list .........................................................-->
   <unit id="movelist"
         class="MoveList"
	 event="MoveList"
	 >
   </unit>

   <!-- challenge .........................................................-->
   <unit id="challenge"
         class="Challenge"
	 event="Challenge"
	 >
   </unit>

   <!-- generic board - Examine Navigation.................................-->
   <unit id="examineNavigation"
         class="ExamineNavigation"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Examine Revert ....................................-->
   <unit id="examineRevert"
         class="ExamineRevert"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Examine Commit ....................................-->
   <unit id="examineCommit"
         class="ExamineCommit"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Examine Navigation End.............................-->
   <unit id="examineNavigationEnd"
         class="ExamineNavigationEnd"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Examine Navigation End Variation...................-->
   <unit id="examineNavigationEndVariation"
         class="ExamineNavigationEndVariation"
	 event="GenericBoard"
	 >
   </unit>
   <!-- generic board - Examine Navigation Begin...........................-->
   <unit id="examineNavigationBegin"
         class="ExamineNavigationBegin"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Examiner Self .....................................-->
   <unit id="examinerSelf"
         class="ExaminerSelf"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Examiner Other.....................................-->
   <unit id="examinerOther"
         class="ExaminerOther"
	 event="GenericBoard"
	 >
   </unit>

   <!-- generic board - Observer Self......................................-->
   <unit id="ObserverSelf"
         class="ObserverSelf"
	 event="GenericBoard"
	 >
   </unit>

</unitTest>
