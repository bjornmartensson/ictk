<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--
 * ictk - Internet Chess ToolKit
 * More information is available at http://jvarsoke.github.io/ictk
 * Copyright (c) 1997-2014 J. Varsoke <ictk.jvarsoke [at] neverbox.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
-->
<!DOCTYPE icsevtml SYSTEM "icsevtml.dtd" [
   <!ENTITY common SYSTEM "parserCommon.xml">
   ]>

<icsevtml>
   <!-- channel............................................................-->
   <event id="channel" 
          class="Channel"
	  enum="CHANNEL"
	  extends="ICSMessageEvent">

      <description>
         This coorisponds to Channel tells, Shouts, Emote Shouts, 
	 T-Shouts, C-Shouts, S-Shouts, T-Channel tells, etc.
      </description>

      <member id="channel:player"      typeref="player"/>
      <member id="channel:accountType" typeref="accountType"/>
      <member id="channel:channel"     typeref="int"
	      varname="channel"
	      functname="Channel"
	      />
      <member id="channel:message"     typeref="message"     inherit="both"/>

      <statics format="java">
      /** if the channel event is a shout then the channel number
       ** indicates what type of shout */
   public static final int SHOUT_CHANNEL  = 1,
      /** emotes are typically: -->Handle scratches head */
			   EMOTE_CHANNEL  = 2,
			   CSHOUT_CHANNEL = 3,
			   SSHOUT_CHANNEL = 4,
			   TSHOUT_CHANNEL = 5;
      </statics>

      <!--channel parser-->
      <parser id="channel:parser"
              name="Channel"
              protocol="FICS"
              extends="ICSEventParser"
	      detectFake="yes">

         <!-- regex -->
	 <regex>
	    <regexref ref="regex:fics:player"/>
	    <regexref ref="regex:fics:accountType"/>
	    \(
	    ([T])?   <!--for tournament channel tells -->
	    (\d+)    <!--channel number -->
	    \)
	    :\s
	    <regexref ref="regex:fics:message"/>
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="2" memberref="channel:player"/>
	    <regexgroup num="3" memberref="channel:accountType"/>
	    <regexgroup num="5" memberref="channel:channel"/>
	    <regexgroup num="6" memberref="channel:message"/>
      if (m.group(4) != null)
         if ("T".equals(m.group(4))) {
            evt.setEventType(ICSEvent.TOURNAMENT_CHANNEL_EVENT);
      }
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="80">
	    <code format="java">
      String str = null;

      sb.append(evt.getPlayer())
        .append(evt.getAccountType());
      
      sb.append("(");

      if (evt.getEventType() == ICSEvent.TOURNAMENT_CHANNEL_EVENT)
         sb.append("T");

      sb.append(evt.getChannel())
        .append("): ");

      sb.append(evt.getMessage());
	    </code>

	 </toNative>
      </parser>

      <!--shout parser-->
      <parser id="shout:parser"
              name="Shout"
	      enum="SHOUT"
              protocol="FICS"
              extends="ICSEventParser"
	      detectFake="yes">

         <!-- regex -->
	 <regex>
	    (
	    (-->\s)      <!-- emotes -->
	    (?:\n\\\s+)? <!-- in rare case of no-space long message  -->
	    <regexref ref="regex:fics:player"/>
	    <regexref ref="regex:fics:accountType"/>
	    <regexref ref="regex:fics:message"/>
	    )
	    |             <!-- or non-emote -->
	    (
	    <regexref ref="regex:fics:player"/>
	    <regexref ref="regex:fics:accountType"/>
	    \s+
	    (?:([sct])-)? <!-- shout types -->
	    shouts:\s
	    )
	    <regexref ref="regex:fics:message"/>
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
      evt.setEventType(ICSEvent.SHOUT_EVENT);
      //emote
      if (m.group(3) != null) {
            evt.setChannel(ICSChannelEvent.EMOTE_CHANNEL);
	    <regexgroup num="4" memberref="channel:player"/>
	    <regexgroup num="5" memberref="channel:accountType"/>
	    <regexgroup num="6" memberref="channel:message"/>
      }
      else {
	    <regexgroup num="8" memberref="channel:player"/>
	    <regexgroup num="9" memberref="channel:accountType"/>
	    <regexgroup num="11" memberref="channel:message"/>
         if (m.group(10) != null) {
           switch (m.group(10).charAt(0)) {
               case 's': 
	          evt.setChannel(ICSChannelEvent.SSHOUT_CHANNEL); 
		  break;
               case 'c': 
	          evt.setChannel(ICSChannelEvent.CSHOUT_CHANNEL); 
		  break;
               case 't': 
	          evt.setChannel(ICSChannelEvent.TSHOUT_CHANNEL); 
		  break;
               default:
                  Log.error(Log.PROG_WARNING,
                     "Received unknown shout type: '"
                     + m.group(10).charAt(0) + "' from " + m.group(0));
                  evt.setEventType(ICSEvent.UNKNOWN_EVENT);
                  evt.setMessage(m.group(0)); //the whole message
                  return;
            }
	 }
	 else {
	    evt.setChannel(ICSChannelEvent.SHOUT_CHANNEL);
	 }
      }
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="80">
	    <code format="java">
      if (evt.getChannel() == ICSChannelEvent.EMOTE_CHANNEL) {
         sb.append("--> ")
           .append(evt.getPlayer())
           .append(evt.getAccountType());
      }

      else {
         sb.append(evt.getPlayer())
           .append(evt.getAccountType())
           .append(" ");

         switch (evt.getChannel()) {
            case ICSChannelEvent.SHOUT_CHANNEL:
               break;

            case ICSChannelEvent.SSHOUT_CHANNEL:
               sb.append("s-");
               break;

            case ICSChannelEvent.CSHOUT_CHANNEL:
               sb.append("c-");
               break;

            case ICSChannelEvent.TSHOUT_CHANNEL:
               sb.append("t-");
               break;

            default:
               throw new IllegalStateException(
               "Tried to get a toNative() with the ShoutParser when the "
               + "channel is not a shout -- should use the Channel Parser for"
               + " channel(" + evt.getChannel() + ")");
         }
         sb.append("shouts: ");
      }

      sb.append(evt.getMessage());
	    </code>
	 </toNative>
      </parser>
   </event>
   &common;
</icsevtml>
