<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--
 * ictk - Internet Chess ToolKit
 * More information is available at http://jvarsoke.github.io/ictk
 * Copyright (c) 1997-2014 J. Varsoke <ictk.jvarsoke [at] neverbox.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
-->
<!DOCTYPE ictkml SYSTEM "icsevtml.dtd" [
   <!ENTITY common SYSTEM "parserCommon.xml">
   ]>

<icsevtml>
   <!-- generic board event ...............................................-->
   <event id="genericBoard" 
          class="GenericBoard"
	  enum="UNKNOWN"
	  extends="ICSEvent">

      <description>
         A flexible class that hosts data from various board events.  This
	 class was created to limit needless proliferation of trivial classes.
	 The data in this cass is thus context dependent.  You should check
	 the EventType before understanding what to do with the data.
      </description>

      <implements idref="board"/>

      <member id="genericBoard:player"       typeref="player"/>
      <member id="genericBoard:boardNumber"  typeref="boardNumber"
                                             inherit="method"/>
      <member id="genericBoard:data "        typeref="int"
                                             varname="data"
					     functname="Data"/>
      <code format="java">
   /* isTrue ****************************************************************/
   /** this is used by various events to distinquish between two similar
    *  events, as when one event means Begin and the other means End.
    */
   public boolean isTrue() { return (data > 0); }
      </code>


      <!--Examine Navigation parser ........................................-->
      <parser id="examineNavigation:parser"
              name="ExamineNavigation"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINE_NAVIGATION"
	      detectFake="no">
         <description>
	    The Data field refers to the number of moves from the current
	    move.  A negative Data number means to traverse the history
	    list in reverse.
	 </description>

         <!-- regex -->
	 <regex>
	    Game\s(\d+):\s
	    <regexref ref="regex:fics:player"/>
	    \s
	    (goes\sforward|backs\sup)
	    \s(\d+)\smoves?.
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="2" memberref="genericBoard:boardNumber"/>
	    <regexgroup num="3" memberref="genericBoard:player"/>
	    <regexgroup num="5" memberref="genericBoard:data"/>
      if ("backs up".equals(m.group(4))) {
	 evt.setData(evt.getData() * -1);
      }
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="48">
	    <code format="java">
      sb.append("Game ")
        .append(evt.getBoardNumber())
	.append(": ")
	.append(evt.getPlayer());
      if (evt.getData() > 0) {
	 sb.append(" goes forward ")
	   .append(evt.getData());
      }
      else {
	 sb.append(" backs up ")
	   .append(evt.getData() * -1);
      }

      if (evt.getData() == 1 || evt.getData() == -1)
         sb.append(" move.");
      else
         sb.append(" moves.");
	    </code>
	 </toNative>
      </parser>

      <!--Examine Revert parser ............................................-->
      <parser id="examineRevert:parser"
              name="ExamineRevert"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINE_REVERT"
	      detectFake="no">
         <description>
	    The Data field refers to the mainline move number that revert
	    has returned us to.
	 </description>

         <!-- regex -->
	 <regex>
	    Game\s(\d+):\s
	    <regexref ref="regex:fics:player"/>
	    \sreverts\sto\smain\sline\smove\s
	    (\d+)\.
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="2" memberref="genericBoard:boardNumber"/>
	    <regexgroup num="3" memberref="genericBoard:player"/>
	    <regexgroup num="4" memberref="genericBoard:data"/>
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="48">
	    <code format="java">
      sb.append("Game ")
        .append(evt.getBoardNumber())
	.append(": ")
	.append(evt.getPlayer())
	.append(" reverts to main line move ")
	.append(evt.getData())
	.append(".");
	    </code>
	 </toNative>
      </parser>

      <!--Examine Commit parser ............................................-->
      <!-- Game 29: guesttick commits the subvariation.-->
      <parser id="examineCommit:parser"
              name="ExamineCommit"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINE_COMMIT"
	      detectFake="no">
         <description>
	    This event is generated when one of the players examining a 
	    game commits the subvariation (makes the variation the main line).
	    The Data field is not used for anything.
	 </description>

         <!-- regex -->
	 <regex>
	    Game\s(\d+):\s
	    <regexref ref="regex:fics:player"/>
	    \scommits\sthe\ssubvariation\.
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="2" memberref="genericBoard:boardNumber"/>
	    <regexgroup num="3" memberref="genericBoard:player"/>
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="48">
	    <code format="java">
      sb.append("Game ")
        .append(evt.getBoardNumber())
	.append(": ")
	.append(evt.getPlayer())
	.append(" commits the subvariation.");
	    </code>
	 </toNative>
      </parser>

      <!--Examine Navigation End Parser ....................................-->
      <!-- You're at the end of the game. -->
      <parser id="examineNavigationEnd:parser"
              name="ExamineNavigationEnd"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINE_NAVIGATION_END"
	      detectFake="no">

         <description>
	    When the player tries to navigate forward past the end of
	    the game's history of moves, this warning is issued by the
	    server.
	    The BoardNumber for this event will always be
	    ICSBoardEvent.PRIMARY_BOARD, since this is message only results
	    from issuing the command on a board the user is examining.
	    The Data field contains no information.
	 </description>

         <!-- regex -->
	 <regex>
	    You're\sat\sthe\send\sof\sthe\sgame\.
	 </regex>

         <!-- toNative -->
         <toNative avgLength="31">
	    <code format="java">
      sb.append("You're at the end of the game.");
	    </code>
	 </toNative>
      </parser>

      <!--Examine Navigation End Variation..................................-->
      <!-- You cannot go forward unless you are on the main line. -->
      <parser id="examineNavigationEndVariation:parser"
              name="ExamineNavigationEndVariation"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINE_NAVIGATION_END_VAR"
	      detectFake="no">

         <description>
	    When the player tries to navigate forward in an uncommited
	    variation, which hasn't become the main line yet.
	    The BoardNumber for this event will always be
	    ICSBoardEvent.PRIMARY_BOARD, since this is message only results
	    from issuing the command on a board the user is examining.
	    The Data field contains no information.
	 </description>

         <!-- regex -->
	 <regex>
	    You\scannot\sgo\sforward\sunless\syou\sare\son\sthe\smain\sline\.
	 </regex>

         <!-- toNative -->
         <toNative avgLength="55">
	    <code format="java">
      sb.append("You cannot go forward unless you are on the main line.");
	    </code>
	 </toNative>
      </parser>


      <!--Examine Navigation Begin .........................................-->
      <!-- You're at the beginning of the game. -->
      <parser id="examineNavigationBegin:parser"
              name="ExamineNavigationBegin"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINE_NAVIGATION_BEGIN"
	      detectFake="no">

         <description>
	    When the player tries to navigate back past the start of
	    the main line this event is issued by the server.
	    The BoardNumber for this event will always be
	    ICSBoardEvent.PRIMARY_BOARD, since this is message only results
	    from issuing the command on a board the user is examining.
	    The Data field contains no information.
	 </description>

         <!-- regex -->
	 <regex>
	    You're\sat\sthe\sbeginning\sof\sthe\sgame.
	 </regex>

         <!-- toNative -->
         <toNative avgLength="37">
	    <code format="java">
      sb.append("You're at the beginning of the game.");
	    </code>
	 </toNative>
      </parser>

      <!-- Examiner Self...................................................-->
      <!-- TibetianTick has made you an examiner of game 104.-->
      <!-- You are no longer examining game 29.-->
      <parser id="examinerSelf:parser"
              name="ExaminerSelf"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINER_SELF"
	      detectFake="no">
         <description>
	    This event is generated when someone has made the user an
	    examiner of a game.
	    The isTrue() method indicates whether the user has become (true)
	    or has stopped (false).
	    If the user has just been made an examiner, then the
	    Player field will return who made the user an examiner.
	    If the user has stopped examining the game the 
	    getPlayer() method will return null.
	 </description>

         <!-- regex -->
	 <regex>
	    <regexref ref="regex:fics:player"/>\s
	    ((has\smade\syou\san\sexaminer\sof\sgame\s)
	    |
	    (are\sno\slonger\sexamining\sgame\s))
	    (\d+)\.
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="2" memberref="genericBoard:player"/>
	    <regexgroup num="6" memberref="genericBoard:boardNumber"/>
      if (m.group(5) != null) {
         evt.setPlayer(null);
	 evt.setData(-1);
      }
      else {
         evt.setData(1);
      }
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="53">
	    <code format="java">
      if (evt.isTrue())
         sb.append(evt.getPlayer())
	   .append(" has made you an examiner of game ");
      else
         sb.append("You are no longer examining game ");
      sb.append(evt.getBoardNumber())
        .append(".");
	    </code>
	 </toNative>
      </parser>

      <!-- Examiner Self Already...........................................-->
      <!-- You are already examining a game.-->
      <parser id="examinerSelfAlready:parser"
              name="ExaminerSelfAlready"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINER_SELF_ALREADY"
	      detectFake="no">
         <description>
	    This message is issued when the user attempts to enter
	    examine mode, when already in examine mode.
	 </description>

         <!-- regex -->
	 <regex>
	    You\sare\salready\sexamining\sa\sgame\.
	 </regex>

         <!-- toNative -->
         <toNative avgLength="34">
	    <code format="java">
	 sb.append("You are already examining a game.");
	    </code>
	 </toNative>
      </parser>

      <!-- Examiner Other..................................................-->
      <!-- guesttick is now an examiner of game 29.-->
      <!-- guesttick stopped examining game 29.-->
      <parser id="examinerOther:parser"
              name="ExaminerOther"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="EXAMINER_OTHER"
	      detectFake="no">
         <description>
	    This event is issued when someone else becomes or stops
	    being an examiner of a game the user is observing or 
	    examining.
	    The isTrue() method indicates whether the user has become (true)
	    or has stopped (false).
	 </description>

         <!-- regex -->
	 <regex>
	    <regexref ref="regex:fics:player"/>\s
	    ((is\snow\san\sexaminer\sof\sgame)
	    |
	    (stopped\sexamining\sgame))
	    \s(\d+)\.
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="2" memberref="genericBoard:player"/>
	    <regexgroup num="6" memberref="genericBoard:boardNumber"/>
      if (m.group(5) != null) {
	 evt.setData(-1);
      }
      else {
         evt.setData(1);
      }
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="50">
	    <code format="java">
         sb.append(evt.getPlayer());
      if (evt.isTrue())
	 sb.append(" is now an examiner of game ");
      else
         sb.append(" stopped examining game ");
      sb.append(evt.getBoardNumber())
        .append(".");
	    </code>
	 </toNative>
      </parser>

      <!-- ObserverSelf....................................................-->
      <!-- You are now observing game 99.-->
      <!-- Removing game 99 from observation list.-->
      <parser id="observerSelf:parser"
              name="ObserverSelf"
              protocol="FICS"
              extends="ICSEventParser"
	      enum="OBSERVER_SELF"
	      detectFake="no">
         <description>
	     This event is issued when you start observing a game, or
	     stop obserivng it.  The 
	 </description>

         <!-- regex -->
	 <regex>
	    ((You\sare\snow\sobserving\sgame)
	    |
	    (Removing\sgame))
	    \s(\d+)
	    (\sfrom\sobservation\slist)?
	    \.
	 </regex>

         <!-- assignMatches -->
	 <assignMatches format="java">
	    <regexgroup num="5" memberref="genericBoard:boardNumber"/>
      if (m.group(3) != null) {
	 evt.setData(1);
      }
      else {
         evt.setData(-1);
      }
	 </assignMatches>

         <!-- toNative -->
         <toNative avgLength="41">
	    <code format="java">
      if (evt.isTrue())
	 sb.append("You are now observing game ")
	   .append(evt.getBoardNumber())
	   .append(".");
      else
         sb.append("Removing game ")
	   .append(evt.getBoardNumber())
           .append(" from observation list.");
	    </code>
	 </toNative>
      </parser>

   </event>
   &common;
</icsevtml>
