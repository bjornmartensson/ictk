<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--
 * ictk - Internet Chess ToolKit
 * More information is available at http://jvarsoke.github.io/ictk
 * Copyright (c) 1997-2014 J. Varsoke <ictk.jvarsoke [at] neverbox.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
-->
<project name="ictk" default="compile">
   <description>
      -=[ ictk ]=- Internet Chess ToolKit (http://jvarsoke.github.io/ictk)
   </description>
   <!-- environment properties  -->
   <property environment="env"/> 

   <!-- global properties -->
   <property name="version"           value="1.0.0"/>
   <!-- if you want 'protected' docs, you should set this variable 
	on the command line -->
   <property name="docs.access"       value="public"/>

   <property name="source.dir"        value="src/main/java"/>
   <property name="test.dir"          value="src/test/java"/>
   <property name="build.dir"         value="target/classes"/>
   <property name="docs.dir"          value="target/docs"/>
   <property name="samples.dir"       value="src/samples"/>
   <property name="release.file"      value="ictk-${version}"/>
   <property name="output.jar"        value="${release.file}.jar"/>
   <property name="nonet.jar"         value="${release.file}-nonet.jar"/>

   <!--JUnit -->
   <!-- might need to change this if your platform isn't supported by Ant -->
   <property name="junit.home"          value="${env.JUNIT_HOME}"/>
   <property name="junit.print.results" value="yes"/>
   <property name="junit.results.dir"   value="results"/>

   <!-- XSLT -->
   <property name="xslt.ics.event.dir" 
             value="${source.dir}/ictk/boardgame/chess/net/ics/event"/>
   <property name="xslt.ics.event.parser.test.dir" 
             value="${test.dir}/ictk/boardgame/chess/net/ics/fics/event"/>

   <!-- libs -->
   <!-- these are jar files distributed with ictk -->
   <property name="lib.dir"           value="repo"/>


   <!-- source files to compile for distro -->
   <fileset dir="${source.dir}" casesensitive="yes">
      <patternset id="non.test.sources">
         <include name="**/*.java"/>
	 <exclude name="**/junk/**"/>
	 <exclude name="**/_*.java"/>
      </patternset>
   </fileset>

   <!-- source files to compile for testing -->
   <fileset dir="${test.dir}" casesensitive="yes">
      <patternset id="test.sources">
         <include name="**/*.java"/>
	 <exclude name="**/junk/**"/>
      </patternset>
   </fileset>

   <!-- compile path for library -->
   <path id="compile.class.path">
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
      <dirset dir="${build.dir}">
      </dirset>
   </path>

   <!-- compile path for test suite -->
   <path id="compile_test.class.path">
      <fileset dir="${junit.home}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
      <dirset dir="${build.dir}">
      </dirset>
   </path>

   <!-- tasks -->
   <!-- display version information -->
   <target name="version"
           description="display version information">
      <echo message="-=[ ictk ]=- Internet Chess ToolKit"/>
      <echo message="             http://jvarsoke.github.io/ictk"/>
      <echo message=""/>
      <echo message="       ictk: ictk-${version}"/>
      <echo message="        ant: ${ant.version}"/>
      <echo message="        jdk: ${ant.java.version}"/>
   </target>

   <!-- initialization and error checking .................................-->
   <target name="init">
      <!-- Generate time stamp -->
      <tstamp/>
   </target>

   <!-- ..................................................................-->
   <!-- run multiple targets -->
   <target name="build"
           description="Generates source from XSLT, compiles, creats Docs and makes jar"
	   depends="generate,compile,docs,jar"
	   >
   </target>

   <!-- ..................................................................-->
   <!-- code generation targets -->
   <target name="generate"
           description="generates source code from XML files">
      <!-- event and parsers -->
      <xslt 
         basedir="${xslt.ics.event.dir}"
	 destdir="${xslt.ics.event.dir}"
	 style="${xslt.ics.event.dir}/event.xsl"
	 includes="*.xml"
	 excludes="*Common.xml"
	 extension=".tmp.log"
	 force="yes"
	 >
	 <param name="destpath" expression="${xslt.ics.event.dir}" />
      </xslt>

      <!-- genfiles.log can be used to later delete the generated files -->
      <concat destfile="${xslt.ics.event.dir}/genfiles.log">
         <fileset dir="${xslt.ics.event.dir}"
	          includes="*.tmp.log"
	 />
      </concat>

      <!-- parser tests -->
      <xslt 
         basedir="${xslt.ics.event.parser.test.dir}"
	 destdir="${xslt.ics.event.parser.test.dir}"
	 style="${xslt.ics.event.parser.test.dir}/templateParser.xsl"
	 includes="parserTests.xml"
	 extension=".tmp.log"
	 force="yes"
	 >
	 <param name="destpath" expression="${xslt.ics.event.parser.test.dir}" />
      </xslt>
      <concat destfile="${xslt.ics.event.parser.test.dir}/genfiles.log">
         <fileset dir="${xslt.ics.event.parser.test.dir}"
	          includes="*.tmp.log"
	 />
      </concat>
      <!-- get rid of the useless log files -->
      <delete>
         <fileset dir="${xslt.ics.event.dir}" 
                  includes="*.tmp.log"
	 />
         <fileset dir="${xslt.ics.event.parser.test.dir}" 
                  includes="*.tmp.log"
	 />
      </delete>

      <!-- generate AllTests.java -->
      <xslt 
         basedir="${xslt.ics.event.parser.test.dir}"
	 destdir="${xslt.ics.event.parser.test.dir}"
	 style="${xslt.ics.event.parser.test.dir}/allTests.xsl"
	 in="${xslt.ics.event.parser.test.dir}/parserTests.xml"
	 out="${xslt.ics.event.parser.test.dir}/AllTests.java"
	 force="yes"
	 >
      </xslt>
      <concat append="true"
              destfile="${xslt.ics.event.parser.test.dir}/genfiles.log"
          >AllTests.java</concat>

      <!-- report all files -->
      <echo>Generated Files: ${xslt.ics.event.dir}</echo>
      <concat>
         <fileset dir="${xslt.ics.event.dir}"
	          includes="genfiles.log"
	 />
      </concat>

      <echo>Generated Files: ${xslt.ics.event.parser.test.dir}</echo>
      <concat>
         <fileset dir="${xslt.ics.event.parser.test.dir}"
	          includes="genfiles.log"
	 />
      </concat>

   </target>

   <!-- compile targets -->
   <target name="compile" depends="init"
           description="compiles the source (w/ debug info)">
      <mkdir dir="${build.dir}"/>
      <javac 
         srcdir="${source.dir}"
         destdir="${build.dir}"
	 debug="yes"
	 optimize="no"
	 excludes="**/_*.java"
	 includeantruntime="false"
	 classpathref="compile.class.path">
	 <patternset refid="non.test.sources"/>
         <compilerarg value="-Xlint"/>
      </javac>
   </target>

   <!-- compile targets -->
   <target name="optimize" depends="init"
           description="compiles the optimized source (w/o debug info)">
      <mkdir dir="${build.dir}"/>
      <javac 
         includeantruntime="false"
         srcdir="${source.dir}"
         destdir="${build.dir}"
         debug="no"
         optimize="yes"
         excludes="**/_*.java"
         classpathref="compile.class.path">
	      <patternset refid="non.test.sources"/>
      </javac>
   </target>

   <!-- ..................................................................-->

   <!--test targets -->

   <target name="compile_test" 
           depends="check_junit,error_junit,compile" 
	   if="junit_is_good"
           description="compiles the regression testing source">
      <mkdir dir="${build.dir}"/>
      <javac 
         includeantruntime="false"
         srcdir="${test.dir}"
         destdir="${build.dir}"
	 debug="yes"
	 optimize="no"
	 verbose="no"
	 classpathref="compile_test.class.path"
	 excludes="**/_*.java">
	 <patternset refid="test.sources"/>
      </javac>
   </target>

   <!-- junit test battery -->
   <target name="test" depends="compile_test"
           description="performs the JUnit test battery">

<!-- only used for the formatter
      <mkdir dir="${junit.results.dir}"/>
-->

      <!-- if this fails you probably don't have $JUNIT_HOME/junit.jar in your
           CLASSPATH (which is required for Ant to use the JUnit task
      -->
      <junit fork="no"
             haltonerror="yes"
	     haltonfailure="yes"
	     printsummary="${junit.print.results}"
	     >

         <classpath refid="compile_test.class.path"/>

	 <sysproperty 
	    key="ictk.boardgame.chess.io.dataDir" 
	    value="${test.dir}/ictk/boardgame/chess/io/"
	 />
	 <sysproperty 
	    key="ictk.boardgame.chess.net.ics.fics.event.dataDir" 
	    value="${test.dir}/ictk/boardgame/chess/net/ics/fics/event/data"
	 />


<!--
	 <formatter type="plain"
	            usefile="false"
		    />
-->

	 <batchtest fork="no"
	            todir="${junit.results.dir}"
	            >
	    <fileset dir="${test.dir}">
	       <include name="**/*Test.java"/>
	       <exclude name="**/AllTests.java"/>
	       <exclude name="**/junk/**"/>
	       <exclude name="**/ParserTest.java"/>
	      <!-- <exclude name="**/net/**"/>
	      -->
            </fileset>
	 </batchtest>
      </junit>
   </target>

   <!-- ..................................................................-->

   <!-- jar targets -->
   <target name="jar" depends="compile"
           description="builds the jar file">
      <jar 
         jarfile="${output.jar}"
         basedir="${build.dir}"
	 compress="no"
      />
	<!-- manifest="manifest.txt" -->
   </target>

   <target name="optimized-jar" depends="clean, optimize"
           description="builds the optimized jar file">
      <jar 
         jarfile="${output.jar}"
         basedir="${build.dir}"
	 compress="no"
      />
	<!-- manifest="manifest.txt" -->
   </target>

   <target name="jar-nonet" depends="compile"
           description="builds a jar file w/o the Net libraries">
      <jar
         jarfile="${nonet.jar}"
	 basedir="${build.dir}"
	 compress="no"
	 excludes="**/net/**"
      />
   </target>

   <!-- ..................................................................-->

   <!-- documentation -->
   <target name="docs" depends="compile"
           description="builds the javadoc documentation">
      <mkdir dir="${docs.dir}"/>

      <javadoc 
         access="${docs.access}"
	 packagenames="ictk.*"
	 author="false"
	 destdir="${docs.dir}"
	 windowtitle="-=[ ictk ]=- API Documentation"
	 doctitle="-=[ ictk ]=- API Documentation"
	 header="&lt;b&gt;Internet Chess ToolKit&lt;/b&gt;
	         &lt;br&gt;
		 &lt;font size='-1'&gt;v${version}&lt;/font&gt;
		 "
	 footer="&lt;font size='-1'&gt;
		Visit the &lt;a href='http://jvarsoke.github.io/ictk'&gt;
		    Website
	         &lt;/a&gt;
		 &lt;br&gt;
		 Internet Chess ToolKit is licensed under the 
		 &lt;a href='http://opensource.org/licenses/MIT'&gt;
		 MIT License
	         &lt;/a&gt;.
		 &lt;/font&gt;
		 "
	 overview="${source.dir}/ictk/overview.html"
	 classpathref="compile.class.path"
	 >
	 <fileset dir="${source.dir}" casesensitive="yes">
	    <patternset refid="non.test.sources"/>
	 </fileset>
      </javadoc>
   </target>

   <!-- ..................................................................-->

   <!-- distro -->
   <target name="dist" depends="bin,src"
           description="create both the binary and source release files">

   </target>

   <!-- binary distribution files -->
   <target name="bin" depends="clean,generate,jar,jar-nonet,docs"
           description="create the binary release file">
      <property name="bin.include"
           value="
	   AUTHORS LICENSE ChangeLog NEWS README TODO 
	   ${docs.dir}/**
	   ${output.jar}
	   ${samples.dir}/**
	   ${lib.dir}/**
	   "
	   />

      <zip destfile="${release.file}.zip">
         <zipfileset prefix="${release.file}/"
	             dir="."
		     includes="${bin.include}"
	    />
      </zip>

      <tar destfile="${release.file}.tar.gz"
	   compression="gzip" >
         <tarfileset prefix="${release.file}/"
	             dir="."
		     includes="${bin.include}"
	    />
      </tar>
   </target>

   <!-- source distribution files -->
   <target name="src" depends="compile_test"
           description="create the source release file">

      <property name="src.include"
           value="
	   AUTHORS COPYING ChangeLog NEWS README TODO
	   build.xml
	   ${source.dir}/**
	   ${test.dir}/**
	   ${lib.dir}/**
	   ${samples.dir}/**
	   "
	   />

      <zip destfile="${release.file}-src.zip">
         <zipfileset prefix="${release.file}/"
	             dir="."
		     includes="${src.include}"
	    />
      </zip>

      <tar destfile="${release.file}-src.tar.gz"
	   compression="gzip" >
         <tarfileset prefix="${release.file}/"
	             dir="."
		     includes="${src.include}"
	    />
      </tar>
   </target>

   <!-- ..................................................................-->

   <!-- clean -->
   <target name="clean"
           description="delete all built files and documentation">
      <delete dir="${build.dir}" />
      <delete dir="${docs.dir}" />
      <delete file="${output.jar}" />
      <echo message="To delete generated code use (unix):"/>
      <echo message="   $ (cd ${xslt.ics.event.dir} &amp;&amp; cat genfiles.log | xargs rm)"/>
      <echo message="   $ (cd ${xslt.ics.event.parser.test.dir} &amp;&amp; cat genfiles.log | xargs rm)"/>
   </target>

   <!-- ..................................................................-->
   <!-- Utility targets -->
   
   <!-- check to make sure the environment variable could be read -->
   <target name="check_junit">
      <condition property="junit_is_good">
         <and>
		<isset property="env.JUNIT_HOME"/>
         </and>
      </condition>
   </target>

   <target name="error_junit" depends="check_junit" unless="junit_is_good">
      <echo message="Error: Ant couldn't read your JUnit environment variable."/>
      <echo message="If you're in a UNIX make sure the JUNIT_HOME variable"/>
      <echo message="is correctly exported.  If you're on a platform that Ant"/>
      <echo message="doesn't yet know how to glean environment variables"/>
      <echo message="from you'll need to set it manually.  Check in "/>
      <echo message="the environment properties section of this build file."/>
   </target>



</project>
