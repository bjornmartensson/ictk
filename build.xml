<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--
 * ictk - Internet Chess ToolKit
 * More information is available at http://jvarsoke.github.io/ictk
 * Copyright (c) 1997-2014 J. Varsoke <ictk.jvarsoke [at] neverbox.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
-->
<!-- vim:shiftwidth=3 -->
<project name="ictk" default="compile">
   <description>
      -=[ ictk ]=- Internet Chess ToolKit (http://jvarsoke.github.io/ictk)
   </description>
   <!-- environment properties  -->
   <property environment="env"/> 

   <!-- global properties -->
   <property name="version"                     value="1.0.0"/>

   <property name="release.file"                value="ictk-${version}"/>
   <property name="output.jar"                  value="${release.file}.jar"/>
   <property name="nonet.jar"                   value="${release.file}-nonet.jar"/>

   <!-- if you want 'protected' docs, you should set this variable 
        on the command line -->
   <property name="docs.access"                 value="public"/>

   <property name="project.source.directory"    value="src"/>
   <property name="project.build.directory"     value="target"/>

   <property name="source.dir"                  value="${project.source.directory}/main/java"/>
   <property name="test.dir"                    value="${project.source.directory}/test/java"/>
   <property name="test.resources.dir"          value="${project.source.directory}/test/resources"/>
   <property name="classes.dir"                 value="${project.build.directory}/classes"/>
   <property name="docs.dir"                    value="${project.build.directory}/site/apidocs"/>
   <property name="samples.dir"                 value="${project.source.directory}/samples"/>
   <property name="gen.source.dir"              value="${project.build.directory}/generated-sources/xml/xslt/java/main/java"/>
   <property name="gen.test.dir"                value="${project.build.directory}/generated-sources/xml/xslt/java/test/java"/>

   <!-- XSLT generated source files -->
   <property name="project.ics.event.dir"       value="ictk/boardgame/chess/net/ics/event"/>
   <property name="project.fics.event.dir"      value="ictk/boardgame/chess/net/ics/fics/event"/>


   <!-- libs -->
   <!-- these are jar files distributed with ictk -->
   <property name="lib.dir"                     value="repo"/>

   <!--JUnit -->
   <!-- might need to change this if your platform isn't supported by Ant -->
   <property name="junit.home"                  value="${env.JUNIT_HOME}"/>
   <property name="junit.print.results"         value="yes"/>
   <property name="junit.results.dir"           value="results"/>

   <fileset dir="." casesensitive="yes">
      <!-- source files to compile for distro -->
      <patternset id="sources">
         <include name="**/*.java"/>
         <exclude name="**/junk/**"/>
         <exclude name="**/_*.java"/>
      </patternset>
   </fileset>

   <!-- compile path for library -->
   <path id="compile.class.path">
      <fileset dir="${lib.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <dirset dir="${classes.dir}">
      </dirset>
   </path>

   <!-- compile path for test suite -->
   <path id="compile_test.class.path">
      <fileset dir="${junit.home}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
      <dirset dir="${classes.dir}">
      </dirset>
      <dirset dir="${test.resources.dir}">
      </dirset>
   </path>

   <!-- tasks -->
   <!-- display version information -->
   <target name="version"
      description="display version information">
      <echo> -=[ ictk ]=- Internet Chess ToolKit
         http://jvarsoke.github.io/ictk

         ictk: ictk-${version}
         ant: ${ant.version}
         jdk: ${ant.java.version}</echo>
   </target>

   <!-- initialization and error checking .................................-->
   <target name="init">
      <!-- Generate time stamp -->
      <tstamp/>
   </target>

   <!-- ..................................................................-->
   <!-- run multiple targets -->
   <target name="build"
      description="Generates source from XSLT, compiles, creats Docs and makes jar"
      depends="generate,compile,docs,jar"
      >
   </target>

   <!-- ..................................................................-->
   <!-- code generation targets -->
   <target name="generate"
      description="generates source code from XML files">
      <!-- event and parsers -->
      <xslt 
         basedir="${source.dir}/${project.ics.event.dir}"
         destdir="${gen.source.dir}/${project.ics.event.dir}"
         style="${source.dir}/${project.ics.event.dir}/event.xsl"
         includes="*.xml"
         excludes="*Common.xml"
         extension=".tmp.log"
         force="yes"
         >
         <param name="destpath" expression="${gen.source.dir}/${project.ics.event.dir}" />
      </xslt>

      <!-- parser tests -->
      <xslt 
         basedir="${test.dir}/${project.fics.event.dir}"
         destdir="${gen.test.dir}/${project.fics.event.dir}"
         style="${test.dir}/${project.fics.event.dir}/templateParser.xsl"
         includes="parserTests.xml"
         extension=".tmp.log"
         force="yes"
         >
         <param name="destpath" expression="${gen.test.dir}/${project.fics.event.dir}" />
      </xslt>

   </target>

   <!-- ..................................................................-->
   <!-- compile targets -->
   <target name="compile" depends="generate,init"
      description="compiles the source (w/ debug info)">
      <mkdir dir="${classes.dir}"/>
      <javac 
         destdir="${classes.dir}"
         debug="yes"
         optimize="no"
         includeantruntime="false"
         classpathref="compile.class.path"
         >
         <src path="${source.dir}"/>
         <src path="${gen.source.dir}"/>
         <patternset refid="sources"/>
         <compilerarg value="-Xlint"/>
      </javac>
   </target>

   <!-- compile targets -->
   <target name="optimize" depends="generate,init"
      description="compiles the source (w/o debug info)">
      <mkdir dir="${classes.dir}"/>
      <javac 
         destdir="${classes.dir}"
         debug="no"
         optimize="yes"
         includeantruntime="false"
         classpathref="compile.class.path"
         >
         <src path="${source.dir}"/>
         <src path="${gen.source.dir}"/>
         <patternset refid="sources"/>
         <compilerarg value="-Xlint"/>
      </javac>
   </target>

   <!-- ..................................................................-->

   <!--test targets -->

   <target name="compile_test" 
      depends="check_junit,error_junit,compile" 
      if="junit_is_good"
      description="compiles the regression testing source">
      <mkdir dir="${classes.dir}"/>
      <javac 
         includeantruntime="false"
         destdir="${classes.dir}"
         debug="yes"
         optimize="no"
         verbose="no"
         classpathref="compile_test.class.path"
         excludes="**/_*.java">
         <src path="${test.dir}"/>
         <src path="${gen.test.dir}"/>
         <patternset refid="sources"/>
      </javac>
   </target>

   <target name="test-verbose"
      description="performs the JUnit test battery with verbose output">

      <property name="test.verbose" value="true"/>
      <antcall target="test"/>
   </target>

   <!-- junit test battery -->
   <target name="test" depends="compile_test"
      description="performs the JUnit test battery">

<!-- only used for the formatter
      <mkdir dir="${junit.results.dir}"/>
-->

      <!-- if this fails you probably don't have $JUNIT_HOME/junit.jar in your
           CLASSPATH (which is required for Ant to use the JUnit task
      -->
      <junit fork="no"
         haltonerror="yes"
         haltonfailure="yes"
         printsummary="${junit.print.results}"
         >

         <classpath refid="compile_test.class.path"/>

         <sysproperty 
            key="ictk.boardgame.chess.io.dataDir" 
            value="${test.resources.dir}/ictk/boardgame/chess/io/"
            />
         <sysproperty 
            key="ictk.boardgame.chess.net.ics.fics.event.dataDir" 
            value="${test.resources.dir}/ictk/boardgame/chess/net/ics/fics/event"
            />

         <formatter type="plain"
            usefile="false"
            if="test.verbose"
            />

         <batchtest fork="no"
            todir="${junit.results.dir}"
            >
            <fileset dir="${test.dir}">
               <include name="**/*Test.java"/>
               <exclude name="**/AllTests.java"/>
               <exclude name="**/junk/**"/>
               <exclude name="**/ParserTest.java"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <!-- ..................................................................-->

   <!-- jar targets -->
   <target name="jar" depends="compile"
      description="builds the jar file">
      <jar 
         jarfile="${output.jar}"
         basedir="${classes.dir}"
         compress="no"
         />
      <!-- manifest="manifest.txt" -->
   </target>

   <target name="optimized-jar" depends="clean, optimize"
      description="builds the optimized jar file">
      <jar 
         jarfile="${output.jar}"
         basedir="${classes.dir}"
         compress="no"
         />
      <!-- manifest="manifest.txt" -->
   </target>

   <target name="jar-nonet" depends="compile"
      description="builds a jar file w/o the Net libraries">
      <jar
         jarfile="${nonet.jar}"
         basedir="${classes.dir}"
         compress="no"
         excludes="**/net/**"
         />
   </target>

   <!-- ..................................................................-->

   <!-- documentation -->
   <target name="docs" depends="compile"
      description="builds the javadoc documentation">
      <mkdir dir="${docs.dir}"/>

      <javadoc 
         access="${docs.access}"
         packagenames="ictk.*"
         author="false"
         destdir="${docs.dir}"
         windowtitle="ictk ${version} API"
         doctitle="ictk ${version} API"
         header="&lt;b&gt;Internet Chess ToolKit&lt;/b&gt;
         &lt;br&gt;
         &lt;font size='-1'&gt;v${version}&lt;/font&gt;
         "
         footer="&lt;font size='-1'&gt;
         Visit the &lt;a href='http://jvarsoke.github.io/ictk'&gt;
         Website
         &lt;/a&gt;
         &lt;br&gt;
         Internet Chess ToolKit is licensed under the 
         &lt;a href='http://opensource.org/licenses/MIT'&gt;
         MIT License
         &lt;/a&gt;.
         &lt;/font&gt;
         "
         overview="${project.source.directory}/main/javadoc/overview.html"
         classpathref="compile.class.path"
         >
         <fileset dir="${source.dir}" casesensitive="yes">
            <patternset refid="sources"/>
         </fileset>
         <fileset dir="${gen.source.dir}" casesensitive="yes">
            <patternset refid="sources"/>
         </fileset>
      </javadoc>
   </target>

   <!-- ..................................................................-->

   <!-- distro -->
   <target name="dist" depends="bin,src"
      description="create both the binary and source release files">

   </target>

   <!-- binary distribution files -->
   <target name="bin" depends="clean,generate,jar,jar-nonet,docs"
      description="create the binary release file">
      <property name="bin.include"
         value="
         AUTHORS LICENSE ChangeLog NEWS README TODO 
         ${docs.dir}/**
         ${output.jar}
         ${samples.dir}/**
         ${lib.dir}/**
         "
         />

      <zip destfile="${release.file}.zip">
         <zipfileset prefix="${release.file}/"
            dir="."
            includes="${bin.include}"
            />
      </zip>

      <tar destfile="${release.file}.tar.gz"
         compression="gzip" >
         <tarfileset prefix="${release.file}/"
            dir="."
            includes="${bin.include}"
            />
      </tar>
   </target>

   <!-- source distribution files -->
   <target name="src" depends="compile_test"
      description="create the source release file">

      <property name="src.include"
         value="
         AUTHORS COPYING ChangeLog NEWS README TODO
         build.xml
         ${source.dir}/**
         ${test.dir}/**
         ${lib.dir}/**
         ${samples.dir}/**
         "
         />

      <zip destfile="${release.file}-src.zip">
         <zipfileset prefix="${release.file}/"
            dir="."
            includes="${src.include}"
            />
      </zip>

      <tar destfile="${release.file}-src.tar.gz"
         compression="gzip" >
         <tarfileset prefix="${release.file}/"
            dir="."
            includes="${src.include}"
            />
      </tar>
   </target>

   <!-- ..................................................................-->

   <!-- clean -->
   <target name="clean"
      description="delete all built files and documentation">
      <delete dir="${project.build.directory}" />
   </target>

   <!-- ..................................................................-->
   <!-- Utility targets -->

   <!-- check to make sure the environment variable could be read -->
   <target name="check_junit">
      <condition property="junit_is_good">
         <and>
            <isset property="env.JUNIT_HOME"/>
         </and>
      </condition>
   </target>

   <target name="error_junit" depends="check_junit" unless="junit_is_good">
      <echo message="Error: Ant couldn't read your JUnit environment variable."/>
      <echo message="If you're in a UNIX make sure the JUNIT_HOME variable"/>
      <echo message="is correctly exported.  If you're on a platform that Ant"/>
      <echo message="doesn't yet know how to glean environment variables"/>
      <echo message="from you'll need to set it manually.  Check in "/>
      <echo message="the environment properties section of this build file."/>
   </target>

</project>
